package Server;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.management.ObjectInstance;
import javax.swing.JOptionPane;


public class ClientRequestProcessor implements Runnable {
	
	private Socket clientSocket;
	private BufferedReader in;
	private PrintStream out;
	private ObjectInputStream inO;
	private ObjectOutputStream outO;
	private LinkedList<ClientRequestProcessor> alleSpieler;
	private boolean isKIAngelegt = false;
	private String name;
	
	
	/**
	 * Zum Anlegen des Prozessors werden On- und Output Streams erstellt. S‰mtliche Kommunikation l‰uft ¸ber das Versenden/Empfangen von Objekten, die 
	 * passend gecastet werden.
	 * Nach erfolgreichem Verbinden mit dem Client verschickt der Prozessor eine Willkommensnachricht an den Client.
	 * @param host
	 * @param port
	 */
	public ClientRequestProcessor(Socket socket){
		this.clientSocket = socket;
		
		
		try { //Empfangsbereitschaft herstellen
			
			outO = new ObjectOutputStream(clientSocket.getOutputStream());
			outO.flush();
			inO = new ObjectInputStream(clientSocket.getInputStream());

			System.out.println("Prozessor erstellt");
		
		}catch (IOException e) {
			try { //Verbindung zu Client beenden, wenn was schief l‰uft
				
				clientSocket.close();
				System.out.println("close");
			}catch (IOException e2) {}
			
			System.err.println("Ausnahme bei Bereitstellung des Streams: " + e);
			return;
		}
	}
	
	

	/**
	 * Methode wird zum Start des Threads ausgef¸hrt. Versendet zun‰chst Willkommensnachricht und Spielernummer.
	 * Anschlieﬂend beginnt die groﬂe Lausch-Schleife. 
	 * Der Prozessor reagiert dabei auf folgende "Befehle"
	 * 
	 * - quit
	 * - spiel anlegen
	 * - join
	 * - schiffe setzen
	 * - fertig
	 * - schiessen
	 * - runde beendet
	 * 
	 * Genaueres in den jeweiligen Methoden.
	 */
	@Override
	public void run() {
	
		String welcome = "Willkommen beim Ultra HD Remix WurstBraten Simulator - Serverversion 0.001 BETA!!";

		try {
			outO.reset();
			outO.writeObject((String) welcome);
			outO.flush();
			outO.reset();
			outO.writeInt(spielerNummer);
			outO.flush();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		Object inputO = "";
		//Hauptschleife zum st‰ndigen Abfragen von Clientaktionen
		do {
			
			try {
				inputO = inO.readObject();
				
			} catch (Exception e) {
				System.out.println("--->Fehler beim Lesen vom Client (Aktion): ");
				System.out.println(e.getMessage());
				continue;
			}
			
			if(inputO.equals((String) "quit")){}
			
			else if(inputO.equals((String) "spiel anlegen")){
				spielAnlegen();	
			}
			
			else if(inputO.equals((String) "join")){
				join();
			}
			
			else if(inputO.equals((String) "schiffe setzen")){
				schiffeSetzen();
			}
			
			else if(inputO.equals((String) "fertig")){
				System.out.println("fertig");
				for(ClientRequestProcessor s : alleSpieler)
					s.setAlleFertig();
				while(!(alleFertig == spielerAnzahl)){System.out.println("warteschleife");} //WARTEN auf alle Spieler
				if(!isKIAngelegt)
					kIsAnlegen();
				spielStart();
				
			}
		
			else if(inputO.equals((String) "schiessen")){
				schiessen();
			}
			
			else if(inputO.equals((String) "runde beendet")){
				spielerFertig();
			}
			
			else{}
			
			
		} while (!(inputO.equals((String) "quit")));
		
	}
	
	
	/**
	 * Sobald der Client die spielrelevanten Daten aus dem Einstellungsfenster gesendet hat, empf‰ngt der Prozessor diese und legt damit ein neues
	 * Spiel an. Zudem werden die relevanten Variablen f¸r die Spielrunden in globaler Variable abgelegt. 
	 */
	public void spielAnlegen() {
		
			try {
				spielerAnzahlGesamt = inO.readInt();
				bGroesse = inO.readInt();
				schiffAnz = inO.readInt();
			} catch (NumberFormatException | IOException e) {				
				e.printStackTrace();
			}			
		
		spiel.spielVorbereitung(spielerAnzahlGesamt, bGroesse, schiffAnz, spielerNummer);
		this.pM = spiel.getPM();
		
		eigenesBoard = spiel.getSpieler(spielerNummer).getBoard();
		schiffListe = spiel.getSchiffListe(spielerNummer);
	}
	
	
	/**
	 * Sendet an Spieler die relevanten Daten raus, wenn sie nicht Ersteller des Spiels sind.
	 */
	public void join(){
		this.pM = spiel.getPM();
		spielerAnzahlGesamt = pM.getLength();
		bGroesse = spiel.getSpieler(0).getbGroesse();
		schiffAnz = spiel.getSchiffAnz();
				
		try {
			outO.reset();
			outO.writeInt(spielerAnzahlGesamt);
			outO.flush();
			outO.reset();
			outO.writeInt(bGroesse);
			outO.flush();
			outO.reset();
			outO.writeInt(schiffAnz);
			outO.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}		
	}
	
	
	/**
	 * Legt automatisch die Computer-Gegner an. Sobald der Client seine Schiffe gesetzt hat und mit "OK" best‰tigt hat, pr¸ft der Prozessor wieviele 
	 * Clients verbunden sind. Dies wird mit der vom Ersteller definierten "spielerAnzahlGesamt" abgeglichen und "restliche" Spieler als KI gesetzt.
	 * Beispiel: 5 Spieler insg. gew‰hlt. Drei Clients Verbunden --> ergibt zwei KI-Gegner.
	 */
	public void kIsAnlegen(){
		boolean[] tempSpielerA = new boolean[spielerAnzahlGesamt];
		
		for(int i = 0; i < tempSpielerA.length; i++){
			if(i < spielerAnzahl)
				tempSpielerA[i] = false;
			else
				tempSpielerA[i] = true;
		}
		
		for(int i = 0; i < tempSpielerA.length; i++){
			if(tempSpielerA[i]){
				spiel.vorbKI(i, schiffAnz);
			}
			isKIAngelegt = true;
		}	
	}
	

	/**
	 * Sobald Spieler seine Schiffe gesetzt hat, empf‰ngt der Prozessor das eigene Board sowie die Schiffliste und gibt diese an das eigentliche Hauptprogramm weiter.
	 */
	public void schiffeSetzen(){
		
		try {
			eigenesBoard = (Board) inO.readObject();
			schiffListe = (List<Ship>) inO.readObject();
			
		}catch (Exception e) {
			System.out.println("--->Fehler beim Lesen vom Client: "+spielerNummer);
			System.out.println(e.getMessage());
		}
		spiel.vorbSpieler(spielerNummer, schiffAnz);
		spiel.getSpieler(spielerNummer).setEigenesBoard(eigenesBoard);
		spiel.getSpieler(spielerNummer).setSchiffListe(schiffListe);
	}
	
	
	/**
	 * setzt "alleFertig" hoch. Dies ist der Counter der festlegt, wann das Spiel beginnt.
	 */
	public void setAlleFertig(){
		alleFertig++;
	}
	
	
	/**
	 * Methode gibt den Starschuss an die verbundenen Spieler.
	 */
	public void spielStart() {
		spiel.spielfeldErstellen();
		//Hauptfenster der Spieler ˆffnen
		try {
			outO.writeObject((String) "hauptfenster oeffnen");
		} catch (IOException e) {
			e.printStackTrace();
		}
		update();
	}
	
	
	/**
	 * Dies ist die Rundenverwaltung im Prozessor.
	 * Sie gibt die Kommandos an den Spieler der an der Reihe ist raus. Ist der aktive Spieler eine KI, so initialisiert die Methode den Schuss der KI.
	 * Anschlieﬂend geht der Update-Befehl raus, so dass alle Spieler unmittelbar die aktuellen Daten erhalten.
	 * Ist nur noch ein Spieler am Leben, geht die game-over Meldung raus.
	 * Der Ersteller der Spiels erh‰lt die Option ein neues Spiel zu erstellen.
	 */
	public void spielerFertig(){
		if(pM.pruefenAktiveSpieler() > 1){
			spiel.spielerBeendetRunde();
			int aktiverSpieler = spiel.getAktiverSpieler();
			
			if(pM.getPlayer(aktiverSpieler).isAmLeben()){
				if(aktiverSpieler < spielerAnzahl) //menschlieche Gegner
					alleSpieler.get(aktiverSpieler).setOut("du bist dran"); //entsprechender Spieler wird informiert - isDran() aktiviert wieder aktionsmˆglichkeiten
				else{//KI Gegner
					if(pM.spielerWillSchiessen(aktiverSpieler)){
						spiel.schiessen(0,0,0,0);
						
						anAlle("update");	
						try {
							outO.writeObject((String) "update");
						} catch (IOException e) {
							e.printStackTrace();
						}
						update();
					}
					try {
						outO.writeObject((String) "update");
					} catch (IOException e) {
						e.printStackTrace();
					}
					update();
					spielerFertig();
				}
			}else{
				spielerFertig();
				return;
			}
		}else{
			try {
				outO.writeObject((String) "game over");
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			int i=0;
			for(Player gewinner : pM.getSpielerArray()){
				if(gewinner.isAmLeben())
					try {
						outO.writeInt(i);
					} catch (IOException e) {
						e.printStackTrace();
					}
				i++;
			}			
			alleSpieler.get(0).setOut("wiederholung");
		}
		
	}



	/**
	 * Liest die Erforderlichen Schieﬂ-Daten ein und gibt sie an das Hauptprogramm weiter.
	 * Diese Methode wird nur f¸r menschliche Spieler verwendet, da die KI-Schieﬂmethode direkt in der Hauptklasse verwoben ist.
	 * Daher erfolgt hier wieder ein Update-Aufruf.
	 */
	public void schiessen(){
		int wirdBeschossen = 0;
		int x = 0;
		int y = 0;
		int schiessendesSchiff = 0;
		
		try {
			
			wirdBeschossen = inO.readInt();;
			x = inO.readInt();
			y = inO.readInt();
			schiessendesSchiff = inO.readInt();
			
		}catch (Exception e) {
			System.out.println("--->Fehler beim Lesen vom Client (Name): ");
			System.out.println(e.getMessage());
		}
		
		spiel.schieﬂenGUIaction(wirdBeschossen,x,y,schiessendesSchiff);
		//neues oeffentlBoard an alle schicken
		
		anAlle("update");	
		try {
			outO.writeObject((String) "update");
		} catch (IOException e) {
			e.printStackTrace();
		}
		update();
	}


	/**
	 * Methode sendet String an alle verbundenen Mitspieler, auﬂer an sich selbst.
	 * @param string
	 */
	public void anAlle(String string){
		for(int i = 0; i < alleSpieler.size(); i++){
			if(i != spielerNummer){
				alleSpieler.get(i).setOut(string);
				alleSpieler.get(i).update();
			}
		}
	}
	
	
	/**
	 * das eigentliche "Senden" des Strings aus anAlle()
	 * @param string
	 */
	public void setOut(String string){
		try {
			outO.reset();
			outO.writeObject((String) string);
			outO.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}


	/**
	 * Update-Methode sendet das eigeneBoard, Schiffliste und das ˆffentliche Board-Array.
	 */
	public void update(){
		
		try {
			outO.reset();
			outO.writeObject(spiel.getSpieler(spielerNummer).getBoard());
			outO.flush();
			outO.reset();
			outO.writeObject(spiel.getSpieler(spielerNummer).getSchiffListe());
			outO.flush();
			outO.reset();
			outO.writeObject(spiel.getoeffentlBoards());
			outO.flush();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void setSpielerAnzahl(int spielerAnzahl){
		this.spielerAnzahl = spielerAnzahl;
	}
	
	public void setSpielerListe(LinkedList<ClientRequestProcessor> liste){
		this.alleSpieler = liste;
	}
	
	public String getName(){
		if(this.name == null){
			try{
				this.name = inO.readUTF();
				return this.name;
			}catch(IOException e){
				e.printStackTrace();
			}
		}
		return this.name;
	}


	public String setGame() {
		String code = "";
		try {
			code = inO.readUTF();
			return code;
		} catch (IOException e) {				
			e.printStackTrace();
		}	
		return null;
	}

}
